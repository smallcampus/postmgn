#!/usr/bin/env node

const Axios = require("axios");
const fs = require("fs-extra");
const prompts = require("prompts");
const AxiosLogger = require('axios-logger')

const apiUrl = 'https://api.getpostman.com'

async function main() {
  let personal = {}
  try {
    personal = require('./personal')
  } catch (err) {
    //Prompt to input apiKey
    const result = await prompts({
      type: 'text',
      name: 'value',
      message: 'What is your API Key?',
    })
    const apiKey = result.value
    personal.apiKey = apiKey
    //Save config
    await fs.writeJson('./personal.json', {apiKey})
    console.log('personal.json created')
  }

  const axios = Axios.create({
    baseURL: apiUrl,
    headers: {
      "X-Api-Key": personal.apiKey
    }
  })
  axios.interceptors.response.use(AxiosLogger.responseLogger, AxiosLogger.errorLogger)

  const action = process.argv[2]
  if (action === 'export') {
    if (!personal.collections) {
      throw new Error("You have to run import first")
    }
    //Export from postman
    const collectionUids = Object.keys(personal.collections)
    console.info('collections=', collectionUids)
    const collectionPromises = collectionUids.map(uid => axios.get(`/collections/${uid}`))

    const environmentUids = Object.keys(personal.environments)
    console.info('environments=', environmentUids)
    const environmentPromises = environmentUids.map(uid => axios.get(`/environments/${uid}`))

    const collectionRess = await Promise.all(collectionPromises)
    const environmentRess = await Promise.all(environmentPromises)

    for (const [idx, res] of environmentRess.entries()) {
      const filename = personal.environments[environmentUids[idx]]
      const path = `./environments/${filename}`
      if (res.data) {
        console.debug('exporting environment ', res.data)
        await fs.writeFile(path, JSON.stringify(res.data, null, 4))
        console.info('write to file ', path)
      } else {
        console.error(`Error saving ${path}: content should not be empty`)
      }
    }

    for (const [idx, res] of collectionRess.entries()) {
      const filename = personal.collections[collectionUids[idx]]
      const path = `./collections/${filename}`
      if (res.data) {
        console.debug('exporting collection ', res.data)
        await fs.writeFile(path, JSON.stringify(res.data, null, 4))
        console.info('write to file ', path)
      } else {
        console.error(`Error saving ${path}: content should not be empty`)
      }
    }
  } else if (action === 'import') {
    //Import to postman
    //validate apiKey
    //Create a new collection
    const collectionFiles = await fs.readdir('./collections')
    const envFiles = await fs.readdir('./environments')
    console.log('collections=', collectionFiles)
    console.log('environments=', envFiles)
    const collections = personal.collections || {}
    const collectionsRev = Object.entries(collections).reduce((a,b)=> {
      a[b[1]] = b[0]
      return a
    }, {})
    for (const filename of collectionFiles) {
      const path = `./collections/${filename}`
      const json = await fs.readJson(path)
      if (!json.collection) {
        //it is just generated by postman, not from postman api
        json.collection = {...json}
        //Update file
        await fs.writeFile(path, JSON.stringify(json, null, 4))
      }

      const uid = collectionsRev[filename]
      if (uid) {
        console.debug('updating collection', json)
        const collectionRes = await axios.put(`/collections/${uid}`, json)
        console.info('updated collection', collectionRes.data.collection)
      } else {
        console.debug('creating collection', json)
        const collectionRes = await axios.post(`/collections`, json)
        console.info('created collection', collectionRes.data.collection)
        collections[collectionRes.data.collection.uid] = filename
      }
    }

    const environments = personal.environments || {}
    const environmentsRev = Object.entries(environments).reduce((a,b)=> {
      a[b[1]] = b[0]
      return a
    }, {})
    for (const filename of envFiles) {
      const path = `./environments/${filename}`
      const json = await fs.readJson(path)
      if (!json.environment) {
        //it is just generated by postman, not from postman api
        json.environment = {...json}
        //Update file
        await fs.writeFile(path, JSON.stringify(json, null, 4))
      }

      const uid = environmentsRev[filename]
      if (uid) {
        console.debug('updating environment', json)
        const envRes = await axios.put(`/environments/${uid}`, json)
        console.info('updated environment', envRes.data.environment)
      } else {
        console.debug('creating environment', json)
        const envRes = await axios.post(`/environments`, json)
        console.log('created environment', envRes.data.environment)
        environments[envRes.data.environment.uid] = filename
      }
    }

    personal.collections = collections
    personal.environments = environments

    await fs.writeFile('./personal.json', JSON.stringify(personal, null, 4))
    console.log('Updated personal.json')
  } else {
    console.info('usage: postmgn [import | export]')
  }
}

main()
